import disnake
from disnake.ext import commands
import asyncio
from datetime import datetime, timedelta
import json
import os
from typing import Optional, Dict, List
from main import clan_data, save_clan_data

class TempChannels(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.active_channels = {}  # {channel_id: {"owner": member_id, "created_at": timestamp}}
        self.voice_states = {}  # {member_id: {"channel": channel_id, "joined_at": timestamp}}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        if 'temp_channels' not in clan_data:
            clan_data['temp_channels'] = {
                'enabled': False,
                'category_id': None,
                'name_template': "üéÆ {username}",
                'user_limit': 0,
                'bitrate': 128000,
                'auto_delete': True,
                'delete_after': 300,  # 5 –º–∏–Ω—É—Ç
                'allowed_roles': [],
                'prefix': "üéÆ",
                'suffix': "",
                'default_name': "–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"
            }
            save_clan_data()

    @commands.slash_command(
        name="temp",
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏"
    )
    @commands.has_permissions(administrator=True)
    async def temp(self, inter: disnake.ApplicationCommandInteraction):
        pass

    @temp.sub_command(
        name="setup",
        description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    )
    async def setup_temp(
        self,
        inter: disnake.ApplicationCommandInteraction,
        category: disnake.CategoryChannel = commands.Param(description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"),
        name_template: str = commands.Param(
            description="–®–∞–±–ª–æ–Ω –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {username} –¥–ª—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)",
            default="üéÆ {username}"
        ),
        user_limit: int = commands.Param(
            description="–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞)",
            default=0,
            min_value=0,
            max_value=99
        ),
        bitrate: int = commands.Param(
            description="–ë–∏—Ç—Ä–µ–π—Ç –∫–∞–Ω–∞–ª–∞ (–≤ –∫–±–∏—Ç/—Å)",
            default=128,
            min_value=8,
            max_value=384
        ),
        auto_delete: bool = commands.Param(
            description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –ø—É—Å—Ç—ã–µ –∫–∞–Ω–∞–ª—ã",
            default=True
        ),
        delete_after: int = commands.Param(
            description="–£–¥–∞–ª—è—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ X —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ–ø—É—Å—Ç–µ–Ω–∏—è",
            default=300,
            min_value=60,
            max_value=3600
        ),
        prefix: str = commands.Param(
            description="–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞",
            default="üéÆ"
        ),
        suffix: str = commands.Param(
            description="–°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞",
            default=""
        )
    ):
        try:
            clan_data['temp_channels'].update({
                'enabled': True,
                'category_id': category.id,
                'name_template': name_template,
                'user_limit': user_limit,
                'bitrate': bitrate * 1000,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∏—Ç—ã
                'auto_delete': auto_delete,
                'delete_after': delete_after,
                'prefix': prefix,
                'suffix': suffix
            })
            save_clan_data()

            embed = disnake.Embed(
                title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                color=disnake.Color.green()
            )
            embed.add_field(name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", value=category.mention, inline=True)
            embed.add_field(name="–®–∞–±–ª–æ–Ω –Ω–∞–∑–≤–∞–Ω–∏—è", value=name_template, inline=True)
            embed.add_field(name="–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", value=str(user_limit) if user_limit > 0 else "–ë–µ–∑ –ª–∏–º–∏—Ç–∞", inline=True)
            embed.add_field(name="–ë–∏—Ç—Ä–µ–π—Ç", value=f"{bitrate} –∫–±–∏—Ç/—Å", inline=True)
            embed.add_field(name="–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ", value="–í–∫–ª—é—á–µ–Ω–æ" if auto_delete else "–í—ã–∫–ª—é—á–µ–Ω–æ", inline=True)
            if auto_delete:
                embed.add_field(name="–£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑", value=f"{delete_after} —Å–µ–∫—É–Ω–¥", inline=True)
            embed.add_field(name="–ü—Ä–µ—Ñ–∏–∫—Å", value=prefix, inline=True)
            embed.add_field(name="–°—É—Ñ—Ñ–∏–∫—Å", value=suffix or "–ù–µ—Ç", inline=True)

            await inter.response.send_message(embed=embed)
        except Exception as e:
            await inter.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", ephemeral=True)

    @temp.sub_command(
        name="toggle",
        description="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    )
    async def toggle_temp(self, inter: disnake.ApplicationCommandInteraction):
        try:
            clan_data['temp_channels']['enabled'] = not clan_data['temp_channels']['enabled']
            save_clan_data()

            status = "–≤–∫–ª—é—á–µ–Ω–∞" if clan_data['temp_channels']['enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            await inter.response.send_message(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ {status}!")
        except Exception as e:
            await inter.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", ephemeral=True)

    @temp.sub_command(
        name="settings",
        description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    )
    async def show_settings(self, inter: disnake.ApplicationCommandInteraction):
        try:
            settings = clan_data['temp_channels']
            category = self.bot.get_channel(settings['category_id']) if settings['category_id'] else None

            embed = disnake.Embed(
                title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
                color=disnake.Color.blue()
            )
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–í–∫–ª—é—á–µ–Ω–∞" if settings['enabled'] else "–í—ã–∫–ª—é—á–µ–Ω–∞", inline=True)
            embed.add_field(name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", value=category.mention if category else "–ù–µ –≤—ã–±—Ä–∞–Ω–∞", inline=True)
            embed.add_field(name="–®–∞–±–ª–æ–Ω –Ω–∞–∑–≤–∞–Ω–∏—è", value=settings['name_template'], inline=True)
            embed.add_field(name="–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", value=str(settings['user_limit']) if settings['user_limit'] > 0 else "–ë–µ–∑ –ª–∏–º–∏—Ç–∞", inline=True)
            embed.add_field(name="–ë–∏—Ç—Ä–µ–π—Ç", value=f"{settings['bitrate'] // 1000} –∫–±–∏—Ç/—Å", inline=True)
            embed.add_field(name="–ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ", value="–í–∫–ª—é—á–µ–Ω–æ" if settings['auto_delete'] else "–í—ã–∫–ª—é—á–µ–Ω–æ", inline=True)
            if settings['auto_delete']:
                embed.add_field(name="–£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑", value=f"{settings['delete_after']} —Å–µ–∫—É–Ω–¥", inline=True)
            embed.add_field(name="–ü—Ä–µ—Ñ–∏–∫—Å", value=settings['prefix'], inline=True)
            embed.add_field(name="–°—É—Ñ—Ñ–∏–∫—Å", value=settings['suffix'] or "–ù–µ—Ç", inline=True)

            await inter.response.send_message(embed=embed)
        except Exception as e:
            await inter.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", ephemeral=True)

    @commands.Cog.listener()
    async def on_voice_state_update(self, member: disnake.Member, before: disnake.VoiceState, after: disnake.VoiceState):
        if not clan_data['temp_channels']['enabled']:
            return

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        if after.channel and not before.channel:
            self.voice_states[member.id] = {
                "channel": after.channel.id,
                "joined_at": datetime.now()
            }

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
        elif before.channel and not after.channel:
            if member.id in self.voice_states:
                del self.voice_states[member.id]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
            if before.channel.id in self.active_channels:
                if not before.channel.members and clan_data['temp_channels']['auto_delete']:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                    await asyncio.sleep(clan_data['temp_channels']['delete_after'])
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –µ—â–µ –ø—É—Å—Ç –ª–∏ –∫–∞–Ω–∞–ª
                    if not before.channel.members:
                        await before.channel.delete()

    @commands.Cog.listener()
    async def on_voice_state_update(self, member: disnake.Member, before: disnake.VoiceState, after: disnake.VoiceState):
        if not clan_data['temp_channels']['enabled']:
            return

        settings = clan_data['temp_channels']
        category = self.bot.get_channel(settings['category_id'])

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        if after.channel and not before.channel:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            if after.channel.id == settings.get('create_channel_id'):
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
                channel_name = settings['name_template'].format(username=member.display_name)
                if settings['prefix']:
                    channel_name = f"{settings['prefix']} {channel_name}"
                if settings['suffix']:
                    channel_name = f"{channel_name} {settings['suffix']}"

                new_channel = await category.create_voice_channel(
                    name=channel_name,
                    user_limit=settings['user_limit'],
                    bitrate=settings['bitrate']
                )

                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                await member.move_to(new_channel)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                self.active_channels[new_channel.id] = {
                    "owner": member.id,
                    "created_at": datetime.now()
                }

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
        elif before.channel and not after.channel:
            if before.channel.id in self.active_channels:
                if not before.channel.members and settings['auto_delete']:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
                    await asyncio.sleep(settings['delete_after'])
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –µ—â–µ –ø—É—Å—Ç –ª–∏ –∫–∞–Ω–∞–ª
                    if not before.channel.members:
                        await before.channel.delete()
                        del self.active_channels[before.channel.id]

def setup(bot):
    bot.add_cog(TempChannels(bot)) 