import disnake
from disnake.ext import commands, tasks
from .giveaway_utils import GiveawayManager
from datetime import datetime, timedelta
import random
import asyncio

class GiveawayCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.giveaway_manager = GiveawayManager()
        self.check_giveaways.start()
        
    def cog_unload(self):
        self.check_giveaways.cancel()

    @commands.slash_command(name="giveaway")
    @commands.has_permissions(administrator=True)
    async def giveaway(
        self,
        inter: disnake.ApplicationCommandInteraction,
        prize: str,
        winners: int = commands.Param(default=1, min_value=1, max_value=100, description="–ß–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –æ—Ç 1 –¥–æ 100"),
        duration: str = commands.Param(description="–ü—Ä–∏–º–µ—Ä: 1d 12h 30m (d-–¥–Ω–∏, h-—á–∞—Å—ã, m-–º–∏–Ω—É—Ç—ã)"),
        description: str = None,
        image_url: str = commands.Param(default=None, description="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    ):
        """–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            total_seconds = 0
            parts = duration.lower().split()
        
            for part in parts:
                if part.endswith('d'):
                    total_seconds += int(part[:-1]) * 86400
                elif part.endswith('h'):
                    total_seconds += int(part[:-1]) * 3600
                elif part.endswith('m'):
                    total_seconds += int(part[:-1]) * 60
                
            if total_seconds < 60:
                return await inter.response.send_message(
                    "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ - 1 –º–∏–Ω—É—Ç–∞",
                    ephemeral=True
                )
            
            end_time = datetime.now() + timedelta(seconds=total_seconds)
        
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞
            embed = disnake.Embed(
                title="üéâ –†–û–ó–´–ì–†–´–®",
                description=(
                    f"**–ü—Ä–∏–∑:** {prize}\n"
                    f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:** {winners}\n"
                    f"**–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è:** <t:{int(end_time.timestamp())}:R>\n"
                    f"{description if description else ''}\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ üéâ —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!"
                ),
                color=0xC0C0C0
            )
            embed.set_footer(text=f"–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç {inter.author.name}")
        
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ URL –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if image_url:
                embed.set_image(url=image_url)
        
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = await inter.channel.send(embed=embed)
            await message.add_reaction("üéâ")
        
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            await self.giveaway_manager.save_giveaway(
                message.id,
                {
                    'prize': prize,
                    'winners': winners,
                    'end_time': end_time.timestamp(),
                    'channel_id': inter.channel.id,
                    'guild_id': inter.guild.id,
                    'host_id': inter.author.id,
                    'ended': False
                }
            )
        
            await inter.response.send_message(
                "‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                ephemeral=True
            )
        
        except Exception as e:
            await inter.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}",
                ephemeral=True
            )

    @commands.slash_command(name="reroll")
    @commands.has_permissions(administrator=True)
    async def reroll(
        self,
        inter: disnake.ApplicationCommandInteraction,
        message_id: str,
        winners: int = 1
    ):
        """–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        
        Parameters
        ----------
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º
        winners: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        """
        try:
            message = await inter.channel.fetch_message(int(message_id))
            reaction = disnake.utils.get(message.reactions, emoji="üéâ")
            
            if not reaction:
                return await inter.response.send_message(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞",
                    ephemeral=True
                )
                
            users = [user async for user in reaction.users() if not user.bot]
            
            if len(users) < winners:
                return await inter.response.send_message(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π",
                    ephemeral=True
                )
                
            new_winners = random.sample(users, winners)
            
            await inter.response.send_message(
                f"üéâ –ù–æ–≤—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏: {', '.join(w.mention for w in new_winners)}!"
            )
            
        except Exception as e:
            await inter.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ã–±–æ—Ä–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {str(e)}",
                ephemeral=True
            )

    @tasks.loop(minutes=1)
    async def check_giveaways(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
        try:
            giveaways = await self.giveaway_manager.load_giveaways()
            current_time = datetime.now().timestamp()
            
            for message_id, data in giveaways.items():
                if not data['ended'] and current_time >= data['end_time']:
                    try:
                        guild = self.bot.get_guild(data['guild_id'])
                        if not guild:
                            continue
                            
                        channel = guild.get_channel(data['channel_id'])
                        if not channel:
                            continue
                            
                        message = await channel.fetch_message(int(message_id))
                        if not message:
                            continue
                            
                        reaction = disnake.utils.get(message.reactions, emoji="üéâ")
                        if not reaction:
                            continue
                            
                        users = [user async for user in reaction.users() if not user.bot]
                        
                        if not users:
                            await channel.send(f"‚ùå –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª! –ü—Ä–∏–∑: {data['prize']}")
                        else:
                            winners = random.sample(users, min(data['winners'], len(users)))
                            await channel.send(
                                f"üéâ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–∏–∑: {data['prize']}\n"
                                f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {', '.join(w.mention for w in winners)}!"
                            )
                            
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–∞
                        embed = message.embeds[0]
                        embed.description = embed.description.replace(
                            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ üéâ —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!",
                            "–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!"
                        )
                        await message.edit(embed=embed)
                        
                        # –û—Ç–º–µ—á–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                        data['ended'] = True
                        await self.giveaway_manager.save_giveaway(int(message_id), data)
                        
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {message_id}: {e}")
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {e}")

    @check_giveaways.before_loop
    async def before_check_giveaways(self):
        await self.bot.wait_until_ready()

def setup(bot):
    bot.add_cog(GiveawayCog(bot))