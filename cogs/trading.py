import disnake
from disnake.ext import commands
from datetime import datetime, timedelta
import json
import os
from pathlib import Path

class Trading(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # --- Data Management ---
        self.data_dir = Path("data")
        self.data_dir.mkdir(exist_ok=True) # Create data directory if it doesn't exist
        self.data_file = self.data_dir / "trading.json"

        # Load trading data
        self.trading_data = self.load_trading_data()
        # Ensure essential structure exists in loaded data
        self.trading_data.setdefault('marketplace', {
            'category_id': None,
            'category_channels': {},
            'general_channel_id': None
        })
        self.trading_data.setdefault('trades', {})

        self.marketplace_data = self.trading_data['marketplace'] # Still use this for convenience

    def load_trading_data(self):
        """Loads trading data from trading.json"""
        if self.data_file.exists():
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except json.JSONDecodeError:
                print(f"Warning: Could not decode JSON from {self.data_file}. Starting with empty data.")
                return {}
            except Exception as e:
                print(f"Error loading trading data from {self.data_file}: {e}")
                return {}
        else:
            return {} # Return empty data if file doesn't exist

    def save_trading_data(self):
        """Saves trading data to trading.json"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.trading_data, f, indent=4, ensure_ascii=False)
        except Exception as e:
            print(f"Error saving trading data to {self.data_file}: {e}")

    async def ensure_marketplace_setup(self, guild):
        # Ensure marketplace category exists
        marketplace_category = disnake.utils.get(guild.categories, id=self.marketplace_data['category_id'])
        if not marketplace_category:
            # Set permissions for @everyone: can view, cannot send messages
            overwrites = {
                guild.default_role: disnake.PermissionOverwrite(
                    read_messages=True,
                    send_messages=False,
                    add_reactions=True, # Allow using buttons/reactions
                    use_external_emojis=True # Allow using custom emojis on reactions/buttons
                )
            }
            marketplace_category = await guild.create_category("üíπ –¢–æ—Ä–≥–æ–≤–∞—è –ü–ª–æ—â–∞–¥–∫–∞", overwrites=overwrites)
            self.marketplace_data['category_id'] = marketplace_category.id
            self.save_trading_data()

        # Ensure general marketplace channel exists
        general_channel = guild.get_channel(self.marketplace_data['general_channel_id'])
        if not general_channel:
            # Permissions for channel should inherit from category, but explicitly setting for safety
            overwrites = {
                guild.default_role: disnake.PermissionOverwrite(
                    read_messages=True,
                    send_messages=False,
                    add_reactions=True,
                    use_external_emojis=True
                )
            }
            general_channel = await marketplace_category.create_text_channel("–æ–±—â–∏–π-—Ä—ã–Ω–æ–∫", topic="–û–±—â–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞", overwrites=overwrites)
            self.marketplace_data['general_channel_id'] = general_channel.id
            self.save_trading_data()

        # Ensure specific category channels exist
        await self.ensure_category_channels(marketplace_category)

    async def ensure_category_channels(self, marketplace_category):
        categories = {
            "üëî –ö–æ—Å—Ç—é–º—ã": "–¢–æ—Ä–≥–æ–≤–ª—è –∫–æ—Å—Ç—é–º–∞–º–∏ –∏ –æ–¥–µ–∂–¥–æ–π",
            "üí£ –û—Ä—É–∂–∏–µ": "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ä—É–∂–∏–µ–º –∏ –±–æ–µ–ø—Ä–∏–ø–∞—Å–∞–º–∏",
            "‚ú® –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã": "–¢–æ—Ä–≥–æ–≤–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –∏ —Ä–µ–¥–∫–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏",
            "üìè –û–±–≤–µ—Å—ã": "–¢–æ—Ä–≥–æ–≤–ª—è –æ–±–≤–µ—Å–∞–º–∏ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏",
            "üíä –ú–µ–¥–∏—Ü–∏–Ω–∞": "–¢–æ—Ä–≥–æ–≤–ª—è –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏",
            "‚öíÔ∏è –ö—Ä–∞—Ñ—Ç": "–¢–æ—Ä–≥–æ–≤–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞",
            "üì¶ –ü—Ä–æ—á–µ–µ": "–ü—Ä–æ—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —É—Å–ª—É–≥–∏"
        }
        
        changes_made = False
        for category_name, topic in categories.items():
            if category_name not in self.marketplace_data['category_channels'] or not marketplace_category.guild.get_channel(self.marketplace_data['category_channels'].get(category_name)):
                # Permissions for channel should inherit from category, but explicitly setting for safety
                overwrites = {
                    marketplace_category.guild.default_role: disnake.PermissionOverwrite(
                        read_messages=True,
                        send_messages=False,
                        add_reactions=True,
                        use_external_emojis=True
                    )
                }
                channel = await marketplace_category.create_text_channel(
                    category_name.lower().replace(" ", "-"),
                    topic=topic,
                    overwrites=overwrites # Apply overwrites
                )
                self.marketplace_data['category_channels'][category_name] = channel.id
                changes_made = True
        if changes_made:
            self.save_trading_data()

    @commands.slash_command(
        name="createtrade",
        description="–°–æ–∑–¥–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    )
    async def create_trade(
        self,
        inter: disnake.ApplicationCommandInteraction,
        item_name: str = commands.Param(description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"),
        item_description: str = commands.Param(description="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"),
        price: int = commands.Param(description="–¶–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"),
        category: str = commands.Param(
            description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞",
            choices=["üëî –ö–æ—Å—Ç—é–º—ã", "üí£ –û—Ä—É–∂–∏–µ", "‚ú® –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", "üìè –û–±–≤–µ—Å—ã", "üíä –ú–µ–¥–∏—Ü–∏–Ω–∞", "‚öíÔ∏è –ö—Ä–∞—Ñ—Ç", "üì¶ –ü—Ä–æ—á–µ–µ"]
        ),
        image_urls: str = commands.Param(description="–°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"),
        duration: int = commands.Param(description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö", default=24)
    ):
        await inter.response.defer(ephemeral=True)

        # Split and validate image URLs
        urls = [url.strip() for url in image_urls.split(',')]
        valid_urls = []
        for url in urls:
            if url.startswith(('http://', 'https://')):
                valid_urls.append(url)
            else:
                await inter.edit_original_response(content=f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}\n–í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                return

        if not valid_urls:
            await inter.edit_original_response(content="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        # Ensure marketplace setup is complete
        await self.ensure_marketplace_setup(inter.guild)

        # Get the target channel based on the selected category
        target_channel_id = self.marketplace_data['category_channels'].get(category)
        if not target_channel_id:
            target_channel_id = self.marketplace_data['general_channel_id']

        target_channel = inter.guild.get_channel(target_channel_id)
        if not target_channel:
            await inter.edit_original_response(content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            return

        # Create trade offer
        trade_id = f"{inter.author.id}_{datetime.now().timestamp()}"
        trade = {
            'id': trade_id,
            'seller': str(inter.author.id),
            'item_name': item_name,
            'item_description': item_description,
            'price': price,
            'category': category,
            'image_urls': valid_urls,
            'created_at': datetime.now().isoformat(),
            'expires_at': (datetime.now() + timedelta(hours=duration)).isoformat(),
            'status': 'active'
        }

        # Create embed with trade information
        embed = disnake.Embed(
            title=f"üõçÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –æ–±–º–µ–Ω–µ",
            description=f"**–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:** {item_name}\n\n"
                       f"**–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:**\n{item_description}\n\n"
                       f"**–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:** {inter.author.mention}",
            color=disnake.Color(0x23272A) # Dark grey color to match the screenshot theme
        )
        embed.add_field(
            name="üí∞ –¶–µ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:", # Add emoji to field name
            value=f"{price} –º–æ–Ω–µ—Ç",
            inline=True
        )
        # Add empty field for spacing/alignment if needed (optional)
        # embed.add_field(name="\u200b", value="\u200b", inline=True)
        embed.add_field(
            name="‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:",
            value=f"<t:{int(datetime.fromisoformat(trade['expires_at']).timestamp())}:R>",
            inline=True
        )
        # Set the first image as the main image
        if valid_urls:
            embed.set_image(url=valid_urls[0])
            # Add additional images as fields if there are more than one
            if len(valid_urls) > 1:
                additional_images = "\n".join([f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+2}]({url})" for i, url in enumerate(valid_urls[1:])])
                embed.add_field(name="üì∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", value=additional_images, inline=False)
        embed.set_footer(text=f"ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {trade_id} ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}") # More descriptive footer
        embed.set_thumbnail(url=inter.author.display_avatar.url)

        # Add buttons
        class TradeButtons(disnake.ui.View):
            def __init__(self, cog, trade_id):
                super().__init__(timeout=None)
                self.cog = cog
                self.trade_id = trade_id # Store trade_id
                # Add a unique custom_id for persistence
                self.custom_id = f"trade_view:{trade_id}"

            @disnake.ui.button(label="–ö—É–ø–∏—Ç—å", style=disnake.ButtonStyle.green, emoji="üí∞")
            async def buy_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
                await interaction.response.defer(ephemeral=True)

                # Find the trade
                trade_id = None
                for tid, trade in self.cog.trading_data['trades'].items():
                    if trade.get('message_id') == interaction.message.id:
                        trade_id = tid
                        break

                if not trade_id:
                    await interaction.edit_original_response(content="‚ùå –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return

                trade = self.cog.trading_data['trades'][trade_id]

                # Prevent seller from showing interest in their own item
                if str(interaction.user.id) == trade['seller']:
                    await interaction.edit_original_response(content="‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—è–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–≤–æ–µ–º—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É!")
                    return

                # Get buyer user object
                buyer = interaction.user

                # Initialize interested_users list if it doesn't exist
                if 'interested_users' not in trade:
                    trade['interested_users'] = []

                # Check if user has already shown interest
                if str(buyer.id) in trade['interested_users']:
                    await interaction.edit_original_response(content="–í—ã —É–∂–µ –ø—Ä–æ—è–≤–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é.")
                    return

                # Add user to interested_users list
                trade['interested_users'].append(str(buyer.id))
                self.cog.save_trading_data()

                # Notify seller (via DM for now)
                seller = self.cog.bot.get_user(int(trade['seller']))
                if seller:
                    try:
                        # Format interest notification as an embed
                        interest_embed = disnake.Embed(
                            title=f"üëã –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é!",
                            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {buyer.mention} –ø—Ä–æ—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É:\n\n"
                                       f"**üõçÔ∏è –ü—Ä–µ–¥–º–µ—Ç:** {trade['item_name']}\n"
                                       f"**üí∞ –¶–µ–Ω–∞:** {trade['price']} –º–æ–Ω–µ—Ç\n\n"
                                       f"*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/viewinterest {trade_id}` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –∏ `/manageinterest` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.*",
                            color=disnake.Color.blue()
                        )
                        if trade.get('image_urls'):
                            interest_embed.set_image(url=trade['image_urls'][0]) # Use first image as thumbnail
                        await seller.send(embed=interest_embed)

                    except disnake.Forbidden:
                         print(f"Could not send interest notification DM to seller {seller.id}.")

                await interaction.edit_original_response(content="‚úÖ –í–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–¥–∞–≤–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω.")

            @disnake.ui.button(label="–û—Ç–º–µ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", style=disnake.ButtonStyle.red, emoji="‚ùå")
            async def cancel_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
                await interaction.response.defer(ephemeral=True)
                # Use self.trade_id to get the trade
                trade = self.cog.trading_data['trades'].get(self.trade_id)

                if not trade:
                    await interaction.edit_original_response(content="‚ùå –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return

                # Pass the trade_id to cancel_trade_message
                await self.cog.cancel_trade_message(interaction, self.trade_id)

            @disnake.ui.button(label="–ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", style=disnake.ButtonStyle.blurple, emoji="üë§")
            async def author_profile_button(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
                await interaction.response.defer()
                
                # Find the trade using the stored trade_id
                trade = self.cog.trading_data['trades'].get(self.trade_id)

                if not trade:
                    await interaction.edit_original_response(content="‚ùå –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return

                seller = self.cog.bot.get_user(int(trade['seller']))

                if not seller:
                    await interaction.edit_original_response(content="‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                # Get the current embed from the message
                current_embed = interaction.message.embeds[0]

                # Check if the current embed is the trade embed or the profile embed
                if "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± –æ–±–º–µ–Ω–µ" in current_embed.title:
                    # Currently showing trade embed, switch to profile embed
                    profile_embed = disnake.Embed(
                        title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller.name}",
                        description=f"**ID –ø—Ä–æ–¥–∞–≤—Ü–∞:** {seller.id}\n"
                                  f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** <t:{int(seller.created_at.timestamp())}:R>\n"
                                  f"**–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:** {len([t for t in self.cog.trading_data['trades'].values() if t['seller'] == str(seller.id) and t['status'] == 'active'])}",
                        color=disnake.Color.blue() # Use a different color for profile embed
                    )
                    profile_embed.set_thumbnail(url=seller.display_avatar.url)

                    # Edit the message with the profile embed
                    await interaction.message.edit(embed=profile_embed)

                    # Change the button label to indicate next action
                    button.label = "‚¨ÖÔ∏è –ö –æ–±—ä—è–≤–ª–µ–Ω–∏—é" # Add emoji
                    # Edit the view on the original message to update the button
                    await interaction.message.edit(view=self) # Edit the message with the updated view

                else:
                    # Currently showing profile embed, switch back to trade embed
                    # Recreate the original trade embed from stored data
                    original_embed_data = trade.get('original_embed')
                    if not original_embed_data:
                        await interaction.edit_original_response(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
                        return

                    original_embed = disnake.Embed.from_dict(original_embed_data)

                    # Edit the message with the original trade embed
                    await interaction.message.edit(embed=original_embed)

                    # Change the button label back
                    button.label = "üë§ –ü—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" # Add emoji
                    # Edit the view on the original message to update the button
                    await interaction.message.edit(view=self)

        # Send the message with embed and view
        message = await target_channel.send(embed=embed, view=TradeButtons(self, trade_id)) # Pass trade_id here

        # Store the trade with message and channel info and original embed data
        trade['message_id'] = message.id
        trade['channel_id'] = target_channel.id
        trade['original_embed'] = embed.to_dict() # Store embed as dictionary
        self.trading_data['trades'][trade_id] = trade
        self.save_trading_data()

        await inter.edit_original_response(content="‚úÖ –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")

    async def cancel_trade_message(self, inter: disnake.ApplicationCommandInteraction, trade_id: str):
        if trade_id not in self.trading_data.get('trades', {}):
            await inter.edit_original_response(content="‚ùå –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        trade = self.trading_data['trades'][trade_id]

        if str(inter.user.id) != trade['seller']:
            await inter.edit_original_response(content="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
            return

        trade['status'] = 'cancelled'
        trade['cancelled_at'] = datetime.now().isoformat()
        self.save_trading_data()

        channel = self.bot.get_channel(trade['channel_id'])
        if channel:
            try:
                message = await channel.fetch_message(trade['message_id'])
                embed = message.embeds[0]
                embed.color = disnake.Color.red() # Red color for cancelled
                embed.title = f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {trade['item_name']}"
                # Add a field indicating cancellation time (optional)
                embed.add_field(
                    name="–°—Ç–∞—Ç—É—Å",
                    value=f"–û—Ç–º–µ–Ω–µ–Ω–æ <t:{int(datetime.fromisoformat(trade['cancelled_at']).timestamp())}:R>",
                    inline=False
                )
                await message.edit(embed=embed, view=None)
            except disnake.NotFound:
                print(f"Message with ID {trade['message_id']} not found for cancellation.")
            except Exception as e:
                print(f"Error editing message {trade['message_id']}: {e}")
        else:
            print(f"Channel with ID {trade['channel_id']} not found for cancellation.")

        await inter.edit_original_response(content="‚úÖ –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!")

    @commands.slash_command(
        name="tradelist",
        description="–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    )
    async def list_trades(
        self,
        inter: disnake.ApplicationCommandInteraction,
        category: str = commands.Param(
            description="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            choices=["–í—Å–µ", "üëî –ö–æ—Å—Ç—é–º—ã", "üí£ –û—Ä—É–∂–∏–µ", "‚ú® –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã", "üìè –û–±–≤–µ—Å—ã", "üíä –ú–µ–¥–∏—Ü–∏–Ω–∞", "‚öíÔ∏è –ö—Ä–∞—Ñ—Ç", "üì¶ –ü—Ä–æ—á–µ–µ"],
            default="–í—Å–µ"
        )
    ):
        await inter.response.defer()

        # Filter trades
        active_trades = [
            trade for trade in self.trading_data['trades'].values()
            if trade['status'] == 'active' and (category == "–í—Å–µ" or trade['category'] == category)
        ]

        if not active_trades:
            await inter.edit_original_response(content="üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        # Create embed with list of offers
        embed = disnake.Embed(
            title=f"üõçÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è{f' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}' if category != '–í—Å–µ' else ''}", # More descriptive title
            color=disnake.Color.blue()
        )

        # Group trades by category
        trades_by_category = {}
        for trade in active_trades:
            category = trade.get('category', 'üì¶ –ü—Ä–æ—á–µ–µ')
            if category not in trades_by_category:
                trades_by_category[category] = []
            trades_by_category[category].append(trade)

        for category, trades in trades_by_category.items():
            trade_list_text = ""
            for trade in trades:
                seller = self.bot.get_user(int(trade['seller']))
                seller_name = seller.name if seller else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü"
                
                trade_list_text += f"**{trade['item_name']}** ({trade['price']} –º–æ–Ω–µ—Ç) üí∞\n"
                trade_list_text += f"  üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"
                trade_list_text += f"  ‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <t:{int(datetime.fromisoformat(trade['expires_at']).timestamp())}:R>\n"
                trade_list_text += f"  üîó ID: `{trade['id']}`\n\n" # Format ID as code

            embed.add_field(
                name=f"__**{category}**__",
                value=trade_list_text if trade_list_text else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                inline=False
            )

        await inter.edit_original_response(embed=embed)

    @commands.slash_command(
        name="tradehistory",
        description="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤"
    )
    async def trade_history(
        self,
        inter: disnake.ApplicationCommandInteraction,
        user: disnake.Member = commands.Param(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏)", default=None)
    ):
        await inter.response.defer()

        # Filter trades
        completed_trades = [
            trade for trade in self.trading_data['trades'].values()
            if trade['status'] == 'completed' and (user is None or str(user.id) in [trade['seller'], trade.get('buyer')])
        ]

        if not completed_trades:
            await inter.edit_original_response(content="üì≠ –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤ –ø—É—Å—Ç–∞!")
            return

        # Create embed with history
        embed = disnake.Embed(
            title=f"üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤{f' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.name}' if user else ''}", # More descriptive title
            color=disnake.Color.blue()
        )

        # Group trades by category
        trades_by_category = {}
        for trade in completed_trades:
            category = trade.get('category', 'üì¶ –ü—Ä–æ—á–µ–µ')
            if category not in trades_by_category:
                trades_by_category[category] = []
            trades_by_category[category].append(trade)

        for category, trades in trades_by_category.items():
            trade_list_text = ""
            for trade in trades:
                seller = self.bot.get_user(int(trade['seller']))
                buyer = self.bot.get_user(int(trade.get('buyer', 0)))
                
                seller_name = seller.name if seller else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü"
                buyer_name = buyer.name if buyer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"
                
                trade_list_text += f"**{trade['item_name']}** ({trade['price']} –º–æ–Ω–µ—Ç) üí∞\n"
                trade_list_text += f"  üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_name}\n"
                trade_list_text += f"  üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_name}\n"
                trade_list_text += f"  ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <t:{int(datetime.fromisoformat(trade['completed_at']).timestamp())}:R>\n"
                trade_list_text += f"  üîó ID: `{trade['id']}`\n\n" # Format ID as code

            embed.add_field(
                name=f"__**{category}**__",
                value=trade_list_text if trade_list_text else "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                inline=False
            )

        await inter.edit_original_response(embed=embed)

    @commands.slash_command(
        name="marktradecompleted",
        description="–û—Ç–º–µ—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü)"
    )
    async def mark_trade_completed(
        self,
        inter: disnake.ApplicationCommandInteraction,
        trade_id: str = commands.Param(description="ID —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    ):
        await inter.response.defer(ephemeral=True)

        # Find the trade by trade ID
        if trade_id not in self.trading_data.get('trades', {}):
            await inter.edit_original_response(content="‚ùå –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        trade = self.trading_data['trades'][trade_id]

        # Check if the user is the seller
        if str(inter.user.id) != trade['seller']:
            await inter.edit_original_response(content="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
            return

        # Check if the trade is already completed or cancelled
        if trade['status'] != 'active':
            await inter.edit_original_response(content=f"‚ùå –≠—Ç–æ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ {trade['status']}.")
            return

        # Update trade status to completed
        trade['status'] = 'completed'
        trade['completed_at'] = datetime.now().isoformat()
        self.save_trading_data()

        # Edit the message to indicate completion
        channel = self.bot.get_channel(trade['channel_id'])
        if channel:
            try:
                message = await channel.fetch_message(trade['message_id'])
                embed = message.embeds[0]
                embed.color = disnake.Color.green() # Use green for completed
                embed.title = f"‚úÖ –°–î–ï–õ–ê –ó–ê–í–ï–†–®–ï–ù–ê: {trade['item_name']}" # More prominent title
                # Add buyer to embed
                buyer_id = trade.get('buyer')
                if buyer_id:
                    # Check if field already exists to avoid duplicates on re-edits
                    buyer_field_exists = any(field.name == "üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:" for field in embed.fields)
                    if not buyer_field_exists:
                        embed.add_field(name="üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:", value=f"<@{buyer_id}>", inline=False) # Add emoji

                await message.edit(embed=embed, view=None) # Remove buttons
            except disnake.NotFound:
                print(f"Message with ID {trade['message_id']} not found for completion.")
            except Exception as e:
                 print(f"Error editing message {trade['message_id']}: {e}")
        else:
             print(f"Channel with ID {trade['channel_id']} not found for completion.")

        await inter.edit_original_response(content="‚úÖ –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ!")

    @commands.slash_command(
        name="viewinterest",
        description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –≤ –≤–∞—à–µ–º —Ç–æ—Ä–≥–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü)"
    )
    async def view_interest(
        self,
        inter: disnake.ApplicationCommandInteraction,
        trade_id: str = commands.Param(description="ID —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    ):
        await inter.response.defer(ephemeral=True)

        # Find the trade
        trade = self.trading_data['trades'].get(trade_id)

        if not trade:
            await inter.edit_original_response(content="‚ùå –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # Check if the user is the seller
        if str(inter.user.id) != trade.get('seller'):
            await inter.edit_original_response(content="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
            return

        # Get interested users
        interested_users_ids = trade.get('interested_users', [])

        if not interested_users_ids:
            await inter.edit_original_response(content="ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
            return

        # Fetch user objects and create a list for display
        user_mentions = []
        for user_id in interested_users_ids:
            user = self.bot.get_user(int(user_id))
            if user:
                user_mentions.append(f"‚Ä¢ {user.mention}") # Use bullet point
            else:
                user_mentions.append(f"‚Ä¢ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id})") # Use bullet point

        embed = disnake.Embed(
            title=f"üëÄ –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è: {trade.get('item_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')}", # Changed emoji
            description="\n".join(user_mentions),
            color=disnake.Color.blue()
        )
        embed.set_footer(text=f"ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {trade_id}")

        await inter.edit_original_response(embed=embed)

    @commands.slash_command(
        name="manageinterest",
        description="–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º–∏ –≤ –≤–∞—à–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü)"
    )
    async def manage_interest(
        self,
        inter: disnake.ApplicationCommandInteraction,
        trade_id: str = commands.Param(description="ID —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
        user: disnake.Member = commands.Param(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –≤—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ"),
        action: str = commands.Param(description="–î–µ–π—Å—Ç–≤–∏–µ", choices=["approve", "reject"])
    ):
        await inter.response.defer(ephemeral=True)

        # Find the trade
        trade = self.trading_data['trades'].get(trade_id)

        if not trade:
            await inter.edit_original_response(content="‚ùå –¢–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # Check if the user is the seller
        if str(inter.user.id) != trade.get('seller'):
            await inter.edit_original_response(content="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!")
            return

        # Get interested users IDs
        interested_users_ids = trade.get('interested_users', [])
        user_id_str = str(user.id)

        # Check if the target user is in the interested list
        if user_id_str not in interested_users_ids:
            await inter.edit_original_response(content=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –Ω–µ –ø—Ä–æ—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é.")
            return

        if action == "approve":
            # Approve the user - send contact info DMs
            seller = inter.user # Seller is the one using the command
            buyer = user       # Buyer is the user being approved

            try:
                # Send DM to buyer
                buyer_embed = disnake.Embed(
                    title=f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å –æ–¥–æ–±—Ä–µ–Ω! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–¥–µ–ª–∫–µ!",
                    description=f"–ü—Ä–æ–¥–∞–≤–µ—Ü {seller.mention} –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–µ–¥–º–µ—Ç—É **{trade['item_name']}**!\n\n"
                              f"**üí∞ –¶–µ–Ω–∞:** {trade['price']} –º–æ–Ω–µ—Ç\n\n"
                              f"*–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º {seller.mention} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.*",
                    color=disnake.Color.blue()
                )
                if trade.get('image_urls'):
                    buyer_embed.set_image(url=trade['image_urls'][0])
                buyer_embed.set_thumbnail(url=seller.display_avatar.url) # Add seller thumbnail
                await buyer.send(embed=buyer_embed)

                # Send DM to seller with buyer info
                seller_embed = disnake.Embed(
                    title=f"‚úÖ –í—ã –æ–¥–æ–±—Ä–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
                    description=f"–í—ã –æ–¥–æ–±—Ä–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {buyer.mention} –∫ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É **{trade['item_name']}**.\n\n"
                              f"**üí∞ –¶–µ–Ω–∞:** {trade['price']} –º–æ–Ω–µ—Ç\n\n"
                              f"*–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º {buyer.mention} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.*",
                    color=disnake.Color.green()
                )
                if trade.get('image_urls'):
                    seller_embed.set_image(url=trade['image_urls'][0])
                seller_embed.set_thumbnail(url=buyer.display_avatar.url) # Add buyer thumbnail
                await seller.send(embed=seller_embed)

                # Optionally remove other interested users or mark this one as approved in data
                # For now, just remove all from the list after one is approved
                trade['interested_users'] = [] # Clear list after one approval
                trade['approved_buyer'] = user_id_str # Store the approved buyer
                self.save_trading_data()

                await inter.edit_original_response(content=f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –æ–¥–æ–±—Ä–µ–Ω. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –õ–°.")

            except disnake.Forbidden:
                 await inter.edit_original_response(content="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –õ–° –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞.")
            except Exception as e:
                 print(f"Error sending approval DMs: {e}")
                 await inter.edit_original_response(content=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

        elif action == "reject":
            # Reject the user - remove from interested list
            trade['interested_users'].remove(user_id_str)
            self.save_trading_data()

            # Optionally notify the rejected user (via DM)
            try:
                # Format rejection notification as an embed
                rejection_embed = disnake.Embed(
                    title=f"‚ùå –ò–Ω—Ç–µ—Ä–µ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                    description=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é:\n\n"
                               f"**üõçÔ∏è –ü—Ä–µ–¥–º–µ—Ç:** {trade['item_name']}\n"
                               f"**üí∞ –¶–µ–Ω–∞:** {trade['price']} –º–æ–Ω–µ—Ç\n\n"
                               f"*–í—ã –±–æ–ª—å—à–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.*",
                    color=disnake.Color.red()
                )
                if trade.get('image_urls'):
                    rejection_embed.set_image(url=trade['image_urls'][0])
                await user.send(embed=rejection_embed)

            except disnake.Forbidden:
                 print(f"Could not send rejection DM to user {user.id}.")

            await inter.edit_original_response(content=f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")

def setup(bot):
    cog = Trading(bot)
    bot.add_cog(cog)